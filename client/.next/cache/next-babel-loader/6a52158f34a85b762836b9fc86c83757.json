{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/usr/app/pages/orders/[orderId].js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport useRequest from \"../../hooks/useRequest\";\nimport { useState, useEffect } from 'react';\nimport StripeCheckout from 'react-stripe-checkout';\nimport Router from 'next/router';\n\nvar orderDetails = function orderDetails(_ref) {\n  _s();\n\n  var currentUser = _ref.currentUser,\n      order = _ref.order,\n      networkErrors = _ref.networkErrors;\n\n  var _useState = useState(-1),\n      timeLeft = _useState[0],\n      setTimeLeft = _useState[1];\n\n  useEffect(function () {\n    console.log('order', order);\n    if (networkErrors) return;\n    if (order.status === \"cancelled\" || order.status === \"complete\") return; // donot set interval for expired orders\n\n    var findTimeLeft = function findTimeLeft() {\n      var tl = (new Date(order.expiresAt) - new Date()) / 1000; // seconds\n\n      setTimeLeft(Math.round(tl));\n    };\n\n    findTimeLeft(); //to make sure time is shown in the ui at first render since setInterval will\n    // wait 1000 ms before setting the state and after that only time is rendered \n    // to test this enable fast 3G and test by commenting and uncommenting above line\n\n    var tlIntervalId = setInterval(findTimeLeft, 1000); // every 1000ms = 1 sec\n\n    return function () {\n      // cleanup\n      clearInterval(tlIntervalId); // clearing the setInterval before leaving the component\n    };\n  }, []);\n  console.log('stripe publish key', process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY);\n\n  var _useRequest = useRequest({\n    url: '/api/payments/v1/new-payment',\n    method: 'post',\n    body: {\n      orderId: order ? order.id : null\n    },\n    onSuccess: function onSuccess() {\n      return Router.push('/orders');\n    }\n  }),\n      doRequest = _useRequest.doRequest,\n      errors = _useRequest.errors;\n\n  return networkErrors ? __jsx(\"div\", {\n    className: \"alert alert-danger\",\n    role: \"alert\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 17\n    }\n  }, __jsx(\"ul\", {\n    className: \"my-0\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 21\n    }\n  }, networkErrors.map(function (e, ind) {\n    return __jsx(\"li\", {\n      key: ind,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 36\n      }\n    }, e.message);\n  }))) : __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }\n  }, timeLeft <= 0 ? __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 21\n    }\n  }, \" sorry!!! the order has expired\") : __jsx(React.Fragment, null, __jsx(\"h4\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 25\n    }\n  }, \"Purchasing \", order.ticket.title), __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 25\n    }\n  }, \"Time left to pay: \", timeLeft, \"s \"), errors, __jsx(StripeCheckout, {\n    token: function token(_ref2) {\n      var id = _ref2.id;\n      return doRequest({\n        token: id\n      });\n    },\n    stripeKey: NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY,\n    amount: order.ticket.price * 100 // converting to cents\n    ,\n    email: currentUser.email,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 25\n    }\n  })));\n};\n\n_s(orderDetails, \"8Vwpzh53s2NGIc+H68nDtslgt1U=\", false, function () {\n  return [useRequest];\n});\n\norderDetails.getInitialProps = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(context, client, currentUser) {\n    var data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return client.get('/api/order/v1/get-order/' + context.query.orderId);\n\n          case 3:\n            data = _context.sent;\n            return _context.abrupt(\"return\", {\n              order: data.data.order\n            });\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n            return _context.abrupt(\"return\", {\n              networkErrors: _context.t0.response.data.errors\n            });\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 7]]);\n  }));\n\n  return function (_x, _x2, _x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nexport default orderDetails;","map":{"version":3,"sources":["/usr/app/pages/orders/[orderId].js"],"names":["useRequest","useState","useEffect","StripeCheckout","Router","orderDetails","currentUser","order","networkErrors","timeLeft","setTimeLeft","console","log","status","findTimeLeft","tl","Date","expiresAt","Math","round","tlIntervalId","setInterval","clearInterval","process","env","NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY","url","method","body","orderId","id","onSuccess","push","doRequest","errors","map","e","ind","message","ticket","title","token","price","email","getInitialProps","context","client","get","query","data","response"],"mappings":";;;;;;;;;AACA,OAAQA,UAAR,MAAwB,wBAAxB;AACA,SAAQC,QAAR,EAAiBC,SAAjB,QAAiC,OAAjC;AACA,OAAOC,cAAP,MAA2B,uBAA3B;AACA,OAAOC,MAAP,MAAmB,aAAnB;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,OAAqC;AAAA;;AAAA,MAAnCC,WAAmC,QAAnCA,WAAmC;AAAA,MAAvBC,KAAuB,QAAvBA,KAAuB;AAAA,MAAjBC,aAAiB,QAAjBA,aAAiB;;AAAA,kBAEvBP,QAAQ,CAAC,CAAC,CAAF,CAFe;AAAA,MAE/CQ,QAF+C;AAAA,MAEtCC,WAFsC;;AAItDR,EAAAA,SAAS,CAAC,YAAI;AACVS,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAoBL,KAApB;AACA,QAAGC,aAAH,EAAkB;AAClB,QAAGD,KAAK,CAACM,MAAN,KAAe,WAAf,IAA8BN,KAAK,CAACM,MAAN,KAAe,UAAhD,EAA4D,OAHlD,CAG0D;;AACpE,QAAMC,YAAY,GAAG,SAAfA,YAAe,GAAI;AACrB,UAAMC,EAAE,GAAG,CAAC,IAAIC,IAAJ,CAAST,KAAK,CAACU,SAAf,IAA0B,IAAID,IAAJ,EAA3B,IAAuC,IAAlD,CADqB,CACmC;;AACxDN,MAAAA,WAAW,CAACQ,IAAI,CAACC,KAAL,CAAWJ,EAAX,CAAD,CAAX;AACH,KAHD;;AAIAD,IAAAA,YAAY,GARF,CAQK;AACf;AACA;;AACA,QAAMM,YAAY,GAAGC,WAAW,CAACP,YAAD,EAAc,IAAd,CAAhC,CAXU,CAW2C;;AAErD,WAAO,YAAI;AAAE;AACTQ,MAAAA,aAAa,CAACF,YAAD,CAAb,CADO,CACsB;AAChC,KAFD;AAGH,GAhBQ,EAgBP,EAhBO,CAAT;AAiBAT,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAiCW,OAAO,CAACC,GAAR,CAAYC,kCAA7C;;AArBsD,oBAsB3BzB,UAAU,CAAC;AAClC0B,IAAAA,GAAG,EAAC,8BAD8B;AAElCC,IAAAA,MAAM,EAAC,MAF2B;AAGlCC,IAAAA,IAAI,EAAC;AACDC,MAAAA,OAAO,EAACtB,KAAK,GAACA,KAAK,CAACuB,EAAP,GAAU;AADtB,KAH6B;AAMlCC,IAAAA,SAAS,EAAC;AAAA,aAAK3B,MAAM,CAAC4B,IAAP,CAAY,SAAZ,CAAL;AAAA;AANwB,GAAD,CAtBiB;AAAA,MAsB/CC,SAtB+C,eAsB/CA,SAtB+C;AAAA,MAsBrCC,MAtBqC,eAsBrCA,MAtBqC;;AA+BtD,SACI1B,aAAa,GAEL;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAoC,IAAA,IAAI,EAAC,OAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAI,IAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQA,aAAa,CAAC2B,GAAd,CAAkB,UAACC,CAAD,EAAGC,GAAH,EAAS;AAC3B,WAAO;AAAI,MAAA,GAAG,EAAEA,GAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAeD,CAAC,CAACE,OAAjB,CAAP;AACC,GAFD,CAFR,CADJ,CAFK,GAYL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK7B,QAAQ,IAAE,CAAV,GACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCADC,GAGD,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAgBF,KAAK,CAACgC,MAAN,CAAaC,KAA7B,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAsB/B,QAAtB,OAFJ,EAGKyB,MAHL,EAII,MAAC,cAAD;AACA,IAAA,KAAK,EAAE;AAAA,UAAEJ,EAAF,SAAEA,EAAF;AAAA,aAAQG,SAAS,CAAC;AAACQ,QAAAA,KAAK,EAACX;AAAP,OAAD,CAAjB;AAAA,KADP;AAEA,IAAA,SAAS,EAAEL,kCAFX;AAGA,IAAA,MAAM,EAAElB,KAAK,CAACgC,MAAN,CAAaG,KAAb,GAAqB,GAH7B,CAGkC;AAHlC;AAIA,IAAA,KAAK,EAAEpC,WAAW,CAACqC,KAJnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,CAJJ,CAbZ;AA+BH,CA9DD;;GAAMtC,Y;UAsByBL,U;;;AA6C/BK,YAAY,CAACuC,eAAb;AAAA,uEAA+B,iBAAOC,OAAP,EAAeC,MAAf,EAAsBxC,WAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEJwC,MAAM,CAACC,GAAP,CAAW,6BAA2BF,OAAO,CAACG,KAAR,CAAcnB,OAApD,CAFI;;AAAA;AAEjBoB,YAAAA,IAFiB;AAAA,6CAGhB;AAAC1C,cAAAA,KAAK,EAAC0C,IAAI,CAACA,IAAL,CAAU1C;AAAjB,aAHgB;;AAAA;AAAA;AAAA;AAKvBI,YAAAA,OAAO,CAACC,GAAR;AALuB,6CAMhB;AAACJ,cAAAA,aAAa,EAAC,YAAI0C,QAAJ,CAAaD,IAAb,CAAkBf;AAAjC,aANgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA/B;;AAAA;AAAA;AAAA;AAAA;;AAUA,eAAe7B,YAAf","sourcesContent":["\nimport  useRequest from \"../../hooks/useRequest\";\nimport {useState,useEffect} from 'react';\nimport StripeCheckout from 'react-stripe-checkout';\nimport Router from 'next/router';\n\nconst orderDetails = ({currentUser,order,networkErrors})=>{\n    \n    const [timeLeft,setTimeLeft] = useState(-1); \n\n    useEffect(()=>{\n        console.log('order',order);\n        if(networkErrors) return;\n        if(order.status===\"cancelled\" || order.status===\"complete\") return; // donot set interval for expired orders\n        const findTimeLeft = ()=>{\n            const tl = (new Date(order.expiresAt)-new Date())/1000; // seconds\n            setTimeLeft(Math.round(tl));\n        }\n        findTimeLeft();//to make sure time is shown in the ui at first render since setInterval will\n        // wait 1000 ms before setting the state and after that only time is rendered \n        // to test this enable fast 3G and test by commenting and uncommenting above line\n        const tlIntervalId = setInterval(findTimeLeft,1000); // every 1000ms = 1 sec\n\n        return ()=>{ // cleanup\n            clearInterval(tlIntervalId); // clearing the setInterval before leaving the component\n        }\n    },[]);\n    console.log('stripe publish key',process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY);\n    const {doRequest,errors} = useRequest({\n        url:'/api/payments/v1/new-payment',\n        method:'post',\n        body:{\n            orderId:order?order.id:null,\n        },\n        onSuccess:()=> Router.push('/orders')\n    });\n           \n    return (\n        networkErrors \n                ? \n                <div className=\"alert alert-danger\" role=\"alert\">\n                    <ul className=\"my-0\">\n                        {\n                            networkErrors.map((e,ind)=>{\n                            return <li key={ind}>{e.message}</li>;\n                            })\n                        }\n                    </ul>\n                </div> \n                :\n                <div>\n                    {timeLeft<=0 ? \n                    <p> sorry!!! the order has expired</p>\n                    :\n                    <>\n                        <h4>Purchasing {order.ticket.title}</h4>\n                        <p>Time left to pay: {timeLeft}s </p>\n                        {errors}\n                        <StripeCheckout\n                        token={({id})=>doRequest({token:id})}\n                        stripeKey={NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY}\n                        amount={order.ticket.price * 100} // converting to cents\n                        email={currentUser.email}\n                        />\n                    </>\n                    }\n                </div>\n        );\n}; \n\n\n\n\norderDetails.getInitialProps = async (context,client,currentUser)=>{\n    try{\n        const data = await client.get('/api/order/v1/get-order/'+context.query.orderId);\n        return {order:data.data.order};\n    }catch(err){\n        console.log(err);\n        return {networkErrors:err.response.data.errors};\n    }\n}\n\nexport default orderDetails;\n"]},"metadata":{},"sourceType":"module"}