{"ast":null,"code":"var _jsxFileName = \"/usr/app/pages/orders/[orderId].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport useRequest from \"../../hooks/useRequest\";\nimport { useState, useEffect } from 'react';\nimport StripeCheckout from 'react-stripe-checkout';\n\nconst orderDetails = ({\n  currentUser,\n  order,\n  networkErrors\n}) => {\n  const {\n    0: timeLeft,\n    1: setTimeLeft\n  } = useState(-1);\n  useEffect(() => {\n    console.log('order', order);\n    if (networkErrors) return;\n    if (order.status === \"cancelled\") return; // donot set interval for expired orders\n\n    const findTimeLeft = () => {\n      const tl = (new Date(order.expiresAt) - new Date()) / 1000; // seconds\n\n      setTimeLeft(Math.round(tl));\n    };\n\n    findTimeLeft(); //to make sure time is shown in the ui at first render since setInterval will\n    // wait 1000 ms before setting the state and after that only time is rendered \n    // to test this enable fast 3G and test by commenting and uncommenting above line\n\n    const tlIntervalId = setInterval(findTimeLeft, 1000); // every 1000ms = 1 sec\n\n    return () => {\n      // cleanup\n      clearInterval(tlIntervalId); // clearing the setInterval before leaving the component\n    };\n  }, []);\n  const {\n    doRequest,\n    errors\n  } = useRequest({\n    url: '/api/payments/v1/new-payment',\n    method: 'post',\n    body: {\n      orderId: order ? order.id : null\n    },\n    onSuccess: data => console.log('success', data)\n  });\n  return networkErrors ? __jsx(\"div\", {\n    className: \"alert alert-danger\",\n    role: \"alert\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }\n  }, __jsx(\"ul\", {\n    className: \"my-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 21\n    }\n  }, networkErrors.map((e, ind) => {\n    return __jsx(\"li\", {\n      key: ind,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 36\n      }\n    }, e.message);\n  }))) : __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }\n  }, timeLeft <= 0 ? __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 21\n    }\n  }, \" sorry!!! the order has expired\") : __jsx(React.Fragment, null, __jsx(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 25\n    }\n  }, \"Purchasing \", order.ticket.title), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 25\n    }\n  }, \"Time left to pay: \", timeLeft, \"s \"), errors, __jsx(StripeCheckout, {\n    token: token => console.log('token', token),\n    stripeKey: \"pk_test_r70zZ76Do1yVdOWIWsSYXoib00tvcCQBg2\",\n    amount: order.ticket.price * 100 // converting to cents\n    ,\n    email: currentUser.email,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 25\n    }\n  })));\n};\n\norderDetails.getInitialProps = async (context, client, currentUser) => {\n  try {\n    const data = await client.get('/api/order/v1/get-order/' + context.query.orderId);\n    return {\n      order: data.data.order\n    };\n  } catch (err) {\n    console.log(err);\n    return {\n      networkErrors: err.response.data.errors\n    };\n  }\n};\n\nexport default orderDetails;","map":{"version":3,"sources":["/usr/app/pages/orders/[orderId].js"],"names":["useRequest","useState","useEffect","StripeCheckout","orderDetails","currentUser","order","networkErrors","timeLeft","setTimeLeft","console","log","status","findTimeLeft","tl","Date","expiresAt","Math","round","tlIntervalId","setInterval","clearInterval","doRequest","errors","url","method","body","orderId","id","onSuccess","data","map","e","ind","message","ticket","title","token","price","email","getInitialProps","context","client","get","query","err","response"],"mappings":"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","sourcesContent":["\nimport  useRequest from \"../../hooks/useRequest\";\nimport {useState,useEffect} from 'react';\nimport StripeCheckout from 'react-stripe-checkout';\n\nconst orderDetails = ({currentUser,order,networkErrors})=>{\n    \n    const [timeLeft,setTimeLeft] = useState(-1); \n\n    useEffect(()=>{\n        console.log('order',order);\n        if(networkErrors) return;\n        if(order.status===\"cancelled\") return; // donot set interval for expired orders\n        const findTimeLeft = ()=>{\n            const tl = (new Date(order.expiresAt)-new Date())/1000; // seconds\n            setTimeLeft(Math.round(tl));\n        }\n        findTimeLeft();//to make sure time is shown in the ui at first render since setInterval will\n        // wait 1000 ms before setting the state and after that only time is rendered \n        // to test this enable fast 3G and test by commenting and uncommenting above line\n        const tlIntervalId = setInterval(findTimeLeft,1000); // every 1000ms = 1 sec\n\n        return ()=>{ // cleanup\n            clearInterval(tlIntervalId); // clearing the setInterval before leaving the component\n        }\n    },[]);\n    \n    const {doRequest,errors} = useRequest({\n        url:'/api/payments/v1/new-payment',\n        method:'post',\n        body:{\n            orderId:order?order.id:null\n        },\n        onSuccess:(data)=> console.log('success',data)\n    });\n           \n    return (\n        networkErrors \n                ? \n                <div className=\"alert alert-danger\" role=\"alert\">\n                    <ul className=\"my-0\">\n                        {\n                            networkErrors.map((e,ind)=>{\n                            return <li key={ind}>{e.message}</li>;\n                            })\n                        }\n                    </ul>\n                </div> \n                :\n                <div>\n                    {timeLeft<=0 ? \n                    <p> sorry!!! the order has expired</p>\n                    :\n                    <>\n                        <h4>Purchasing {order.ticket.title}</h4>\n                        <p>Time left to pay: {timeLeft}s </p>\n                        {errors}\n                        <StripeCheckout\n                        token={(token)=> console.log('token',token)}\n                        stripeKey=\"pk_test_r70zZ76Do1yVdOWIWsSYXoib00tvcCQBg2\"\n                        amount={order.ticket.price * 100} // converting to cents\n                        email={currentUser.email}\n                        />\n                    </>\n                    }\n                </div>\n        );\n}; \n\n\n\n\norderDetails.getInitialProps = async (context,client,currentUser)=>{\n    try{\n        const data = await client.get('/api/order/v1/get-order/'+context.query.orderId);\n        return {order:data.data.order};\n    }catch(err){\n        console.log(err);\n        return {networkErrors:err.response.data.errors};\n    }\n}\n\nexport default orderDetails;\n"]},"metadata":{},"sourceType":"module"}