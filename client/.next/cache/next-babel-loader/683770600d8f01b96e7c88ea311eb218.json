{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/usr/app/pages/orders/[orderId].js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport useRequest from \"../../hooks/useRequest\";\nimport { useState, useEffect } from 'react';\n\nvar orderDetails = function orderDetails(_ref) {\n  _s();\n\n  var currentUser = _ref.currentUser,\n      order = _ref.order,\n      networkErrors = _ref.networkErrors;\n\n  var _useState = useState(),\n      timeLeft = _useState[0],\n      setTimeLeft = _useState[1];\n\n  useEffect(function () {\n    console.log('use effect');\n    if (networkErrors) return;\n    if (order.status === \"cancelled\") return; // donot set interval for expired orders\n\n    var findTimeLeft = function findTimeLeft() {\n      var tl = (new Date(order.expiresAt) - new Date()) / 1000; // seconds\n\n      setTimeLeft(Math.round(tl));\n    };\n\n    findTimeLeft(); //to make sure time is shown in the ui at first render since setInterval will\n    // wait 1000 ms before setting the state and after that only time is rendered \n    // to test this enable fast 3G and test by commenting and uncommenting above line\n\n    var tlIntervalId = setInterval(findTimeLeft, 1000); // every 1000ms = 1 sec\n\n    return function () {\n      // cleanup\n      clearInterval(tlIntervalId); // clearing the setInterval before leaving the component\n    };\n  }, []);\n\n  var _useRequest = useRequest({\n    url: '/api/payments/v1/create-payment',\n    method: 'post',\n    body: {\n      orderId: order ? order.id : null\n    },\n    onSuccess: function onSuccess(data) {\n      return console.log('success', data);\n    }\n  }),\n      doRequest = _useRequest.doRequest,\n      errors = _useRequest.errors;\n\n  return networkErrors ? __jsx(\"div\", {\n    className: \"alert alert-danger\",\n    role: \"alert\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }\n  }, __jsx(\"ul\", {\n    className: \"my-0\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 21\n    }\n  }, networkErrors.map(function (e, ind) {\n    return __jsx(\"li\", {\n      key: ind,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 36\n      }\n    }, e.message);\n  }))) : __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }\n  }, __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 21\n    }\n  }, \"Time left to pay: \", timeLeft, \"s \"), errors, __jsx(\"button\", {\n    onClick: doRequest,\n    className: \"btn btn-primary\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 21\n    }\n  }, \"Pay\"));\n};\n\n_s(orderDetails, \"jGweag1Q6kVrai9/kqrCetA9s4U=\", false, function () {\n  return [useRequest];\n});\n\norderDetails.getInitialProps = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(context, client, currentUser) {\n    var data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return client.get('/api/order/v1/get-order/' + context.query.orderId);\n\n          case 3:\n            data = _context.sent;\n            return _context.abrupt(\"return\", {\n              order: data.data.order\n            });\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n            return _context.abrupt(\"return\", {\n              networkErrors: _context.t0.response.data.errors\n            });\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 7]]);\n  }));\n\n  return function (_x, _x2, _x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default orderDetails;","map":{"version":3,"sources":["/usr/app/pages/orders/[orderId].js"],"names":["useRequest","useState","useEffect","orderDetails","currentUser","order","networkErrors","timeLeft","setTimeLeft","console","log","status","findTimeLeft","tl","Date","expiresAt","Math","round","tlIntervalId","setInterval","clearInterval","url","method","body","orderId","id","onSuccess","data","doRequest","errors","map","e","ind","message","getInitialProps","context","client","get","query","response"],"mappings":"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","sourcesContent":["\nimport  useRequest from \"../../hooks/useRequest\";\nimport {useState,useEffect} from 'react';\n\nconst orderDetails = ({currentUser,order,networkErrors})=>{\n    \n    const [timeLeft,setTimeLeft] = useState(); \n    \n    useEffect(()=>{\n        console.log('use effect');\n        if(networkErrors) return;\n        if(order.status===\"cancelled\") return; // donot set interval for expired orders\n        const findTimeLeft = ()=>{\n            const tl = (new Date(order.expiresAt)-new Date())/1000; // seconds\n            setTimeLeft(Math.round(tl));\n        }\n        findTimeLeft();//to make sure time is shown in the ui at first render since setInterval will\n        // wait 1000 ms before setting the state and after that only time is rendered \n        // to test this enable fast 3G and test by commenting and uncommenting above line\n        const tlIntervalId = setInterval(findTimeLeft,1000); // every 1000ms = 1 sec\n\n        return ()=>{ // cleanup\n            clearInterval(tlIntervalId); // clearing the setInterval before leaving the component\n        }\n    },[]);\n    \n    const {doRequest,errors} = useRequest({\n        url:'/api/payments/v1/create-payment',\n        method:'post',\n        body:{\n            orderId:order?order.id:null\n        },\n        onSuccess:(data)=> console.log('success',data)\n    });\n           \n    return (\n        networkErrors \n                ? \n                <div className=\"alert alert-danger\" role=\"alert\">\n                    <ul className=\"my-0\">\n                        {\n                            networkErrors.map((e,ind)=>{\n                            return <li key={ind}>{e.message}</li>;\n                            })\n                        }\n                    </ul>\n                </div> \n                :\n                <div>\n                    <h1>Time left to pay: {timeLeft}s </h1>\n                    {/* <h4>Price: {ticket.price}</h4> */}\n                    {errors}\n                    <button onClick={doRequest} className=\"btn btn-primary\">Pay</button>\n                </div>\n        );\n}; \n\n\n\n\norderDetails.getInitialProps = async (context,client,currentUser)=>{\n    try{\n        const data = await client.get('/api/order/v1/get-order/'+context.query.orderId);\n        return {order:data.data.order};\n    }catch(err){\n        console.log(err);\n        return {networkErrors:err.response.data.errors};\n    }\n}\n\nexport default orderDetails;\n"]},"metadata":{},"sourceType":"module"}